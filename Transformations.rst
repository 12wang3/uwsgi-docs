uWSGI Transformations
=====================

Starting from uWSGI 1.9.7, a "transformations" api has been added to :doc:`InternalRouting`

A transformation is like a filter applied to the response generated by your application.

Transformations can be chained (the output of a transformation will be the input of the following one) and can completely overwrite
response headers.

The most common example of transformation is the gzip encoding. The output of your application is passed to a function encoding it to gzip
and setting the updated Content-Length and Content-Encoding:

.. code-block:: ini

   [uwsgi]
   plugin = python,transformation_gzip
   http-socket = :9090
   ; load the werkezeug test app
   module = werkzeug.testapp:test_app
   ; if the client support gzip encoding goto to the gzipper
   route-if = contains:${HTTP_ACCEPT_ENCODING};gzip goto:mygzipper
   route-run = last:

   route-label = mygzipper
   ; ensure the output has text/html as content-type
   route = ^/$ addheader:Content-Type: text/html
   ; pass the response to the gzip transformation
   route = ^/$ gzip:

The 'cachestore' routing instruction is a transformation too, so you can cache the various state of the response

.. code-block:: ini

   [uwsgi]
   plugin = python,transformation_gzip
   http-socket = :9090
   ; load the werkezeug test app
   module = werkzeug.testapp:test_app
   ; create a cache of 100 items
   cache = 100
   ; if the client support gzip encoding goto to the gzipper
   route-if = contains:${HTTP_ACCEPT_ENCODING};gzip goto:mygzipper
   route = ^/$ cache:key=werkzeug_homepage
   route = ^/$ cachestore:key=werkzeug_homepage
   route-run = last:

   route-label = mygzipper
   ; ensure the output has text/html as content-type
   route = ^/$ cache:key=werkzeug_homepage.gz
   route = ^/$ addheader:Content-Type: text/html
   ; first cache the 'clean' response (for client not supporting gzip)
   route = ^/$ cachestore:key=werkzeug_homepage
   ; then pass the response to the gzip transformation
   route = ^/$ gzip:
   ; and cache it again in another item (gzipped)
   route = ^/$ cachestore:key=werkzeug_homepage.gz


Another common transformation is applyfing stylesheets to XML file: :doc:`XSLT`

The 'toxslt' transformation is exposed by the 'xslt' plugin:

.. code-block:: sh

   uwsgi --plugin xslt --http-socket :9090 -w mycd --route-run "toxslt:stylesheet=t/xslt/cd.xml.xslt,params=foobar=test&agent=\${HTTP_USER_AGENT}"

the mycd module is a simple xml generator. Its output is then passed to the xslt transformation

Available transformations (last update 20130422)
************************************************

 - gzip, exposed by the transformation_gzip plugin (encode the response buffer to gzip)
 - toupper, exposed by the transformation_toupper plugin (example plugin transforming each character in uppercase)
 - tofile, exposed by the transformation_tofile plugin (used for caching to response buffer to a static file)
 - toxslt, exposed by the xslt plugin (apply xslt stylesheet to an xml response buffer)
 - cachestore, exposed by the router_cache plugin (cache the response buffer in the uWSGI cache)

Working on
**********

 - rpc, allows applyng rpc functions to a response buffer (limit 64k size)
 - lua, apply a lua function to a response buffer (no limit in size)
 - memcachedstore, store the response buffer in a memcached object
